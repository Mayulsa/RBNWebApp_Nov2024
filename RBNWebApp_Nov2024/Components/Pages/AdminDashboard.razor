@page "/admin-dashboard"
@rendermode InteractiveServer
@using RBNWebApp_Nov2024.Components
@using Blazored.LocalStorage
@using RBNWebApp_Nov2024.Class
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject BloodUnitsCRUD BloodUnitService
@inject UserCRUD UserService
@inject RefrigeratorCRUD RefrigeratorService
@inject ReservationCRUD ReservationService
@implements IDisposable

<PageTitle>Admin Dashboard - Red Nacional de Bancos de Sangre</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 80vh">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!isAuthenticated || userRole != "Admin")
{
    <div class="alert alert-danger" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        Acceso no autorizado. Por favor, inicie sesión como administrador.
    </div>
}
else
{
    <div class="container-fluid mt-4">
        <!-- Welcome Section -->
        <div class="row mb-4">
            <div class="col">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h2 class="card-title mb-0">Dashboard Administrativo</h2>
                                <p class="card-text">Bienvenido, @userName</p>
                            </div>
                            <i class="bi bi-gear-fill fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="card border-danger h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-subtitle mb-2 text-muted">Total Usuarios</h6>
                                <h2 class="card-title mb-0 text-danger">@totalUsers</h2>
                            </div>
                            <i class="bi bi-people-fill text-danger fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-danger h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-subtitle mb-2 text-muted">Total Refrigeradores</h6>
                                <h2 class="card-title mb-0 text-danger">@totalRefrigerators</h2>
                            </div>
                            <i class="bi bi-thermometer-high text-danger fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-danger h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-subtitle mb-2 text-muted">Unidades de Sangre</h6>
                                <h2 class="card-title mb-0 text-danger">@totalBloodUnits</h2>
                            </div>
                            <i class="bi bi-droplet-fill text-danger fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-danger h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-subtitle mb-2 text-muted">Reservas Pendientes</h6>
                                <h2 class="card-title mb-0 text-danger">@pendingReservations</h2>
                            </div>
                            <i class="bi bi-clock-history text-danger fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Donation History Graph -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-danger">
                    <div class="card-header bg-danger text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up me-2"></i>
                            Historial de Donaciones
                        </h5>
                    </div>
                    <div class="card-body">
                        <div style="height: 400px;">
                            <DonationChartComponent Data="@donationData" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Blood Type Distribution and Recent Activity -->
        <div class="row g-4">
            <div class="col-md-6">
                <div class="card border-danger h-100">
                    <div class="card-header bg-danger text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-pie-chart-fill me-2"></i>
                            Distribución por Tipo de Sangre
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Tipo</th>
                                        <th>Cantidad</th>
                                        <th>Porcentaje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in bloodTypeDistribution)
                                    {
                                        <tr>
                                            <td><span class="badge bg-danger">@item.Key</span></td>
                                            <td>@item.Value units</td>
                                            <td>@(((decimal)item.Value / totalBloodUnits * 100).ToString("0.#"))%</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card border-danger h-100">
                    <div class="card-header bg-danger text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-clock-history me-2"></i>
                            Actividad Reciente
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group list-group-flush">
                            @foreach (var activity in recentActivities)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@activity.Title</h6>
                                        <small class="text-muted">@activity.Time.ToShortTimeString()</small>
                                    </div>
                                    <p class="mb-1">@activity.Description</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private string userName = "";
    private string userRole = "";
    private Timer? refreshTimer;

    // Dashboard metrics
    private int totalUsers;
    private int totalRefrigerators;
    private int totalBloodUnits;
    private int pendingReservations;
    private Dictionary<string, int> bloodTypeDistribution = new();
    private List<DonationDataPoint> donationData = new();
    private List<ActivityItem> recentActivities = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userProfile = await LocalStorage.GetItemAsync<List<string>>("userProfile");
            if (userProfile == null || !userProfile.Any())
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            isAuthenticated = true;
            userName = userProfile[0];
            userRole = userProfile[2];

            if (userRole != "Admin")
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            await LoadDashboardData();

            // Refresh dashboard every 30 seconds
            refreshTimer = new Timer(async _ =>
                {
                    await LoadDashboardData();
                    await InvokeAsync(StateHasChanged);
                }, null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
        }
        catch (Exception ex)
        {
            // Handle error appropriately
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load users data
            var users = await UserService.GetAllAsync();
            totalUsers = users.Count;

            // Load refrigerator data
            var refrigerators = await RefrigeratorService.GetAllAsync();
            totalRefrigerators = refrigerators.Count;

            // Load blood units data
            var bloodUnits = await BloodUnitService.GetAllAsync();
            totalBloodUnits = bloodUnits.Count;

            // Calculate blood type distribution
            bloodTypeDistribution = bloodUnits
                .GroupBy(u => u.BloodType)
                .ToDictionary(g => g.Key, g => g.Count());

            // Generate donation history data
            donationData = bloodUnits
                .GroupBy(u => u.DonationDate.Date)
                .OrderBy(g => g.Key)
                .Select(g => new DonationDataPoint
                    {
                        Date = g.Key,
                        Count = g.Count()
                    })
                .ToList();

            // Load pending reservations
            var reservations = await ReservationService.GetAllAsync();
            pendingReservations = reservations.Count(r => r.Status == "Pendiente");

            // Load recent activities
            recentActivities = await GetRecentActivities(reservations);
        }
        catch (Exception ex)
        {
            // Handle error appropriately
        }
    }

    private async Task<List<ActivityItem>> GetRecentActivities(List<Reservation> reservations)
    {
        var activities = new List<ActivityItem>();

        foreach (var reservation in reservations.OrderByDescending(r => r.RequestDate).Take(5))
        {
            activities.Add(new ActivityItem
                {
                    Title = $"Nueva Reserva - {reservation.BloodType}",
                    Description = $"Solicitud de {reservation.UserName} - Estado: {reservation.Status}",
                    Time = reservation.RequestDate ?? DateTime.Now
                });
        }

        return activities;
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    private class ActivityItem
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime Time { get; set; }
    }

    public class DonationDataPoint
    {
        public DateTime Date { get; set; }
        public int Count { get; set; }
    }
}